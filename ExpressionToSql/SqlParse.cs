using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Linq;
using ExpressionToSQL.common;
using ExpressionToSQL.common.configuration;

namespace ExpressionToSQL
{
    public class SqlParse : IQuery, ICommand
    {
        public SqlConfiguration Configuration { get; private set; }

        public SqlParse(SqlConfiguration configuration = null)
        {
            this.Configuration = configuration ?? new SqlConfiguration();
        }

        public ISqlCommand<T> Command<T>(Expression<Func<T, bool>> expression = null)
        {
            return new SqlGenerator<T>(this.Configuration, expression);
        }

        public ISqlQuery<T> Query<T>(Expression<Func<T, bool>> expression = null)
        {
            return new SqlGenerator<T>(this.Configuration, expression);
        }

        public IQuery Configure(
            bool wihNoLock,
            bool? fieldsInclude = null,
            bool? propsInclude = null,
            string tableName = null,
            string schema = null
            )
        {
            return setConfigure(
                wihNoLock: wihNoLock,
                fieldsInclude: fieldsInclude,
                propsInclude: propsInclude,
                tableName: tableName,
                schema: schema
                );

        }

        public ICommand Configure(
            bool includeId,
            string primaryKeyTable = null,
            bool? fieldsInclude = null,
            bool? propsInclude = null,
            string tableName = null,
            string schema = null
            )
        {

            return setConfigure(
                        includeId: includeId,
                        primaryKeyTable: primaryKeyTable,
                        fieldsInclude: fieldsInclude,
                        propsInclude: propsInclude,
                        tableName: tableName,
                        schema: schema
                        );
        }
        public ICommand Configure(
            string primaryKeyTable,
            bool? includeId = null,
            bool? fieldsInclude = null,
            bool? propsInclude = null,
            string tableName = null,
            string schema = null
            )
        {

            return setConfigure(
                        includeId: includeId,
                        primaryKeyTable: primaryKeyTable,
                        fieldsInclude: fieldsInclude,
                        propsInclude: propsInclude,
                        tableName: tableName,
                        schema: schema
                        );
        }

        public SqlParse Configure(
            bool? fieldsInclude = null,
            bool? propsInclude = null,
            string tableName = null,
            string schema = null
    )
        {

            return setConfigure(
                        fieldsInclude: fieldsInclude,
                        propsInclude: propsInclude,
                        tableName: tableName,
                        schema: schema
                        );
        }


        private SqlParse setConfigure(
            bool? autoGeneratedId = null,
            bool? includeId = null,
            bool? wihNoLock = null,
            string primaryKeyTable = null,
            bool? fieldsInclude = null,
            bool? propsInclude = null,
            string tableName = null,
            string schema = null
            )
        {
            var config = this.Configuration.Clone();

            config.IncludeId = includeId ?? config.IncludeId;
            config.FieldsInclude = fieldsInclude ?? config.FieldsInclude;
            config.FieldsInclude = fieldsInclude ?? config.FieldsInclude;
            config.PropsInclude = propsInclude ?? config.PropsInclude;
            config.TableName = tableName ?? config.TableName;
            config.Schema = schema ?? config.Schema;
            config.AutoGeneratedId = autoGeneratedId ?? config.AutoGeneratedId;
            config.PrimaryKeyTable = primaryKeyTable ?? config.PrimaryKeyTable;


            return new SqlParse(config);
        }
    }
}
